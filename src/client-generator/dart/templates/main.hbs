// ignore_for_file: non_constant_identifier_names, camel_case_types, constant_identifier_names, unused_local_variable

import 'dart:io';
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';

{{> utils}}

enum HttpMethod { GET, POST, PUT, DELETE }

const apiVersion = '{{version}}';

class {{className}}HttpError extends Error {
  int status;
  String code;
  Map<String, dynamic> payload;
  HttpException? innerException;

  ApiClientHttpError(
    this.status,
    this.code,
    this.payload, [
    this.innerException,
  ]);
}


{{#each methods}}
  {{> declaration}}
{{/each}}


{{#each methods}}
  {{> error}}
{{/each}}


class {{className}} {
  final Dio dio;

  {{className}}({required this.dio});

  Future<dynamic> request(
    HttpMethod method,
    String routeUrl, {
    Map<String, dynamic>? query,
    Map<String, dynamic>? body,
  }) async {
    final response = await dio.request(
      url,
      data: body,
      queryParameters: query,
      options: Options(
        validateStatus: (status) =>
            (status == null || status < 500) ? true : false,
        responseType: ResponseType.json,
        contentType: Headers.jsonContentType,
        method: method.name,
      ),
    );

    if (response.statusCode == 200) {
      return response.data;
    }

    if (response.statusCode == 400) {
      final errorCode = response.data['code'];
      if (errorCode == null || errorCode == '') {
        debugPrint(response.data);
        throw HttpException(response.data['message'] ?? 'Invalid request');
      }
      throw ApiClientHttpError(response.statusCode!, errorCode, response.data);
    }

    if (response.statusCode == 401) {
      // TODO: use refresh code to revalidate credentials
      throw HttpException('Unauthorized');
    }

    throw Exception('Unhandled error');
  }

  {{#each methods}}
  
    {{> method className=../className}}
  {{/each}}
}