// ignore_for_file: non_constant_identifier_names, camel_case_types, constant_identifier_names

import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;

{{> utils}}

enum HttpMethod { GET, POST, PUT, DELETE }

const apiVersion = '{{version}}';

class {{className}}HttpError extends Error {
  int status;
  String code;
  Map<String, dynamic> payload;
  HttpException? innerException;

  ApiClientHttpError(
    this.status,
    this.code,
    this.payload, [
    this.innerException,
  ]);
}


{{#each methods}}
  {{> declaration}}
{{/each}}


{{#each methods}}
  {{> error}}
{{/each}}


class {{className}} {
  final String baseUrl;

  {{className}}({required this.baseUrl});

  Future<Map<String, dynamic>> request(
    HttpMethod method,
    String routeUrl, {
    Map<String, dynamic>? params,
    Map<String, dynamic>? query,
    Map<String, dynamic>? body,
  }) async {
    http.Response response;

    String url = routeUrl
        .split('/')
        .map((x) => x.startsWith(':') ? params![x] : x)
        .join('/');

    String queryString = query != null
        ? query.keys.map((k) => '$k=${query[k]}').join('&')
        : '';

    final fullUrl = Uri.parse('$baseUrl$url$queryString');

    const headers = {'Content-Type': 'application/json; charset=UTF-8'};

    switch (method) {
      case HttpMethod.POST:
        response = await http.post(
          fullUrl,
          headers: headers,
          body: jsonEncode(body),
        );
      case HttpMethod.GET:
        response = await http.get(fullUrl, headers: headers);
      case HttpMethod.PUT:
        response = await http.put(
          fullUrl,
          headers: headers,
          body: jsonEncode(body),
        );
      case HttpMethod.DELETE:
        response = await http.delete(fullUrl, headers: headers);
    }

    if (response.statusCode == 200) {
      final decoded = jsonDecode(response.body);
      return decoded;
    }

    if (response.statusCode == 400) {
      final decoded = jsonDecode(response.body);
      throw {{className}}HttpError(response.statusCode, decoded['code'], decoded);
    }

    throw Exception('Not implemented');
  }

  {{#each methods}}
  
    {{> method className=../className}}
  {{/each}}
}