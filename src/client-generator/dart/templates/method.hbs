{{#docs}}
  {{{title}}}
  {{#if description}}// {{{description}}}{{/if}}
  {{#if deprecated}}@Deprecated({{coalesce deprecationMessage 'Should not be used and will be removed in the future.' }}){{/if}}
{{/docs}}
{{methodName}}({{#if arguments}}  
  {{#with arguments }}
  {
    {{#if ../isRPC}}
      {{zodRecord body}} data
    {{else}}
          {{#if params}}
            required {{zodRecord params}} params,
          {{/if}}
          {{#if query}}
            {{zodRecord query}}? query,
          {{/if}}
          {{#if body}}
            required {{zodRecord body}} body,
          {{/if}}
          {{#if headers}}
            required {{zodRecord headers}} headers,
          {{/if}}
    {{/if}}
  }
  {{/with}}
{{/if}}) async {
  {{#if deprecated~}}
    print('[{{methodName}}] endpoint was deprecated - {{coalesce deprecationMessage 'should not be used and will be removed in the future.' }}');
  {{~/if}}
    Map<String, dynamic> result;

    try {
      result =  await {{> request}}
    } on {{className}}HttpError catch (e) {
      final {{methodName}}_Errors error = {{methodName}}_Errors.values.firstWhere(
        (x) => x.name == e.code,
      );
      return Result.failure(error, e.stackTrace);
    }

  {{#if returnType}}
    return Result.success({{hidrateFromMap "result" returnType}});
  {{else}}
    return Result.success(null);
  {{/if}}
}
