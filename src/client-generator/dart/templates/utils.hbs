sealed class Result<T, E> {
  const Result();

  factory Result.success(T value) = Success<T, E>;
  factory Result.failure(E error, [StackTrace? stackTrace]) = Failure<T, E>;
}

class Success<T, E> extends Result<T, E> {
  final T value;
  const Success(this.value);
}

class Failure<T, E> extends Result<T, E> {
  final E error;
  final StackTrace? stackTrace;
  const Failure(this.error, [this.stackTrace]);
}
