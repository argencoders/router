type Ok<T> = { result: 'ok'; ok: true; value: T };
type Err<E> = { result: 'error'; ok: false; error: E };

type ResultSync<T, E = undefined> = E extends undefined ? Ok<T> : Ok<T> | Err<E>;
type Result<T, E = undefined> = Promise<ResultSync<T, E>>;

const ok = <T>(value: T): Ok<T> => ({ result: 'ok' as const, ok: true as const, value });
const err = <E>(error: E): Err<E> => ({ result: 'error' as const, ok: false as const, error });

const Result = { ok, err };


function decodeObject(value: unknown): unknown {
  if (Array.isArray(value)) {
    return value.map(val => decodeObject(val));
  }
  if (typeof value === 'object' && value !== null) {
    if ('$date' in value && typeof value.$date === 'string') {
      return new Date(value.$date);
    } else {
      return Object.fromEntries(Object.entries(value).map(([key, val]) => [key, decodeObject(val)]));
    }
  }
  return value;
}
